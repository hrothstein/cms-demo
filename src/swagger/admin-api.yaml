openapi: 3.0.0
info:
  title: CMS Admin Portal API
  description: API for Card Management System Admin Portal
  version: 1.0.0
  contact:
    name: CMS Development Team
    email: dev@cms-bank.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://cms-backend.herokuapp.com/api/v1
    description: Production server

security:
  - AdminAuth: []

paths:
  /admin/auth/login:
    post:
      tags:
        - Authentication
      summary: Admin login
      description: Authenticate admin user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "john.csr"
                password:
                  type: string
                  example: "admin123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      adminId:
                        type: integer
                        example: 2
                      username:
                        type: string
                        example: "john.csr"
                      firstName:
                        type: string
                        example: "John"
                      lastName:
                        type: string
                        example: "CSR"
                      role:
                        type: string
                        enum: [CSR, FRAUD_ANALYST, SUPERVISOR, ADMIN]
                        example: "CSR"
                      department:
                        type: string
                        example: "Customer Service"
                      permissions:
                        type: array
                        items:
                          type: string
                        example: ["VIEW_CUSTOMERS", "VIEW_CARDS", "LOCK_CARDS"]
                      expiresIn:
                        type: string
                        example: "1h"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/auth/profile:
    get:
      tags:
        - Authentication
      summary: Get admin profile
      description: Get current admin user profile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AdminProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/customers:
    get:
      tags:
        - Customers
      summary: List customers
      description: Get paginated list of customers with search and filters
      parameters:
        - name: search
          in: query
          description: Search term for customer name, email, or ID
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          description: Filter by account status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, SUSPENDED]
      responses:
        '200':
          description: Customers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /admin/customers/{customerId}:
    get:
      tags:
        - Customers
      summary: Get customer details
      description: Get detailed information about a specific customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            example: "CUST-12345"
      responses:
        '200':
          description: Customer details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CustomerDetail'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/cards:
    get:
      tags:
        - Cards
      summary: List cards
      description: Get paginated list of cards with search and filters
      parameters:
        - name: search
          in: query
          description: Search term for card number or customer name
          schema:
            type: string
        - name: status
          in: query
          description: Filter by card status
          schema:
            type: string
            enum: [ACTIVE, LOCKED, EXPIRED, CANCELLED]
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /admin/cards/{cardId}/lock:
    post:
      tags:
        - Cards
      summary: Lock a card
      description: Lock a card with reason
      parameters:
        - name: cardId
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            example: "CRD-0001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  example: "Suspicious activity detected"
      responses:
        '200':
          description: Card locked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/cards/{cardId}/unlock:
    post:
      tags:
        - Cards
      summary: Unlock a card
      description: Unlock a previously locked card
      parameters:
        - name: cardId
          in: path
          required: true
          description: Card ID
          schema:
            type: string
            example: "CRD-0001"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reason
              properties:
                reason:
                  type: string
                  example: "Issue resolved"
      responses:
        '200':
          description: Card unlocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /admin/transactions:
    get:
      tags:
        - Transactions
      summary: List transactions
      description: Get paginated list of transactions with search and filters
      parameters:
        - name: search
          in: query
          description: Search term for transaction ID or merchant name
          schema:
            type: string
        - name: status
          in: query
          description: Filter by transaction status
          schema:
            type: string
            enum: [COMPLETED, PENDING, FAILED, CANCELLED, REFUNDED]
        - name: dateRange
          in: query
          description: Filter by date range
          schema:
            type: string
            enum: [TODAY, YESTERDAY, THIS_WEEK, LAST_WEEK, THIS_MONTH, LAST_MONTH]
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /admin/reports/dashboard:
    get:
      tags:
        - Reports
      summary: Get dashboard statistics
      description: Get key metrics for admin dashboard
      responses:
        '200':
          description: Dashboard statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/DashboardStats'

  /admin/audit-logs:
    get:
      tags:
        - Audit Logs
      summary: Get audit logs
      description: Get paginated audit trail
      parameters:
        - name: adminId
          in: query
          description: Filter by admin user ID
          schema:
            type: integer
        - name: actionType
          in: query
          description: Filter by action type
          schema:
            type: string
        - name: targetType
          in: query
          description: Filter by target type
          schema:
            type: string
            enum: [CUSTOMER, CARD, TRANSACTION, DISPUTE]
        - name: startDate
          in: query
          description: Start date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date filter (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Audit logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

components:
  securitySchemes:
    AdminAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for admin authentication

  schemas:
    AdminProfile:
      type: object
      properties:
        adminId:
          type: integer
          example: 2
        username:
          type: string
          example: "john.csr"
        email:
          type: string
          example: "john.csr@cms-bank.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "CSR"
        role:
          type: string
          enum: [CSR, FRAUD_ANALYST, SUPERVISOR, ADMIN]
          example: "CSR"
        department:
          type: string
          example: "Customer Service"
        isActive:
          type: boolean
          example: true
        lastLogin:
          type: string
          format: date-time
          example: "2025-10-06T10:30:00Z"

    Customer:
      type: object
      properties:
        customerId:
          type: string
          example: "CUST-12345"
        username:
          type: string
          example: "john.doe"
        email:
          type: string
          example: "john.doe@example.com"
        phone:
          type: string
          example: "+1-212-555-0123"
        accountStatus:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2025-10-01T08:00:00Z"
        lastLogin:
          type: string
          format: date-time
          example: "2025-10-06T09:15:00Z"
        cardCount:
          type: string
          example: "2"
        activeCardCount:
          type: string
          example: "2"
        totalTransactions:
          type: string
          example: "15"
        openDisputes:
          type: string
          example: "0"

    CustomerDetail:
      allOf:
        - $ref: '#/components/schemas/Customer'
        - type: object
          properties:
            address:
              type: object
              properties:
                street:
                  type: string
                  example: "123 Main St"
                city:
                  type: string
                  example: "New York"
                state:
                  type: string
                  example: "NY"
                zipCode:
                  type: string
                  example: "10001"
            kycStatus:
              type: string
              enum: [PENDING, VERIFIED, REJECTED]
              example: "VERIFIED"
            riskScore:
              type: number
              example: 0.15

    Card:
      type: object
      properties:
        cardId:
          type: string
          example: "CRD-0001"
        cardNumber:
          type: string
          example: "**** **** **** 1234"
        cardType:
          type: string
          example: "VISA"
        cardStatus:
          type: string
          enum: [ACTIVE, LOCKED, EXPIRED, CANCELLED]
          example: "ACTIVE"
        expiryDate:
          type: string
          example: "12/26"
        customerName:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-01T08:00:00Z"
        lockedBy:
          type: string
          nullable: true
          example: null
        lockedAt:
          type: string
          format: date-time
          nullable: true
          example: null

    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          example: "TXN-12345"
        amount:
          type: number
          format: float
          example: 125.50
        currency:
          type: string
          example: "USD"
        status:
          type: string
          enum: [COMPLETED, PENDING, FAILED, CANCELLED, REFUNDED]
          example: "COMPLETED"
        merchantName:
          type: string
          example: "Amazon.com"
        customerName:
          type: string
          example: "John Doe"
        cardLastFour:
          type: string
          example: "1234"
        transactionDate:
          type: string
          format: date-time
          example: "2025-10-06T14:30:00Z"
        riskLevel:
          type: string
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
          example: "LOW"

    DashboardStats:
      type: object
      properties:
        totalCustomers:
          type: integer
          example: 523
        totalCards:
          type: integer
          example: 1247
        activeCards:
          type: integer
          example: 1089
        lockedCards:
          type: integer
          example: 23
        transactionsToday:
          type: integer
          example: 456
        transactionsThisWeek:
          type: integer
          example: 3421
        transactionsThisMonth:
          type: integer
          example: 15643
        transactionVolumeToday:
          type: number
          format: float
          example: 12456.78
        openDisputes:
          type: integer
          example: 47
        unresolvedAlerts:
          type: integer
          example: 89
        criticalAlerts:
          type: integer
          example: 5

    AuditLog:
      type: object
      properties:
        logId:
          type: integer
          example: 12345
        adminId:
          type: integer
          example: 2
        adminUsername:
          type: string
          example: "john.csr"
        actionType:
          type: string
          example: "CARD_LOCK"
        targetType:
          type: string
          enum: [CUSTOMER, CARD, TRANSACTION, DISPUTE]
          example: "CARD"
        targetId:
          type: string
          example: "CRD-0001"
        actionDescription:
          type: string
          example: "Admin locked card CRD-0001"
        beforeValue:
          type: object
          example: {"cardStatus": "ACTIVE"}
        afterValue:
          type: object
          example: {"cardStatus": "LOCKED"}
        ipAddress:
          type: string
          example: "192.168.1.100"
        createdAt:
          type: string
          format: date-time
          example: "2025-10-06T10:35:12Z"

    Pagination:
      type: object
      properties:
        total:
          type: integer
          example: 150
        limit:
          type: integer
          example: 20
        offset:
          type: integer
          example: 0
        pages:
          type: integer
          example: 8

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "UNAUTHORIZED"
            message:
              type: string
              example: "Admin authentication required"
